# -*- coding: utf-8 -*-
"""UDINUS08_Assignment Tugas Akhir 4_Kelompok 6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c_34vEPJgA7Fkt-nMFd5I7W1GGKQR3dW
"""

#import library
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
import warnings
warnings.filterwarnings("ignore")

#load dataset
data = pd.read_excel('PelanggaranAkb.xlsx')
data.head()

#select features
df = data.drop(columns=['Waktu','Nata','Shift'], axis=1)
df

#review dataset
df.describe()

df.isna().sum()

#data cleansing
df = df.dropna()

#data transform
df['Pelanggar Roda 2 - Online'] = df['Pelanggar Roda 2 - Online'].astype('int')

df['Pelanggar Roda 3'] = df['Pelanggar Roda 3'].astype('int')

df.info()

byjalan = df.groupby('Jalan')
df2 = byjalan['Pelanggar Roda 2 - Pribadi','Pelanggar Roda 2 - Online','Pelanggar Roda 3','Pelanggar Roda 4 - Pribadi','Pelanggar Roda 4 - Angkutan Umum','Lainnya'].sum()

df2

#independent columns
X = df2.iloc[:,1:7]
#target columns
y = df2.iloc[:,0]

#apply SelectKBest
bestfeature = SelectKBest(score_func=chi2, k=4)
fit = bestfeature.fit(X,y)
dfscores = pd.DataFrame(fit.scores_)
dfcolumns = pd.DataFrame(X.columns)

featureScores = pd.concat([dfcolumns, dfscores], axis=1)
featureScores.columns = ['Field', 'Score']
print(featureScores.nlargest(10,'Score'))

#correlation
corrmat = df2.corr()
top_corr_features = corrmat.index
plt.figure(figsize=(20,20))

#plot heatmap
h = sns.heatmap(df2[top_corr_features].corr(),annot=True)

#standardization
scaler = StandardScaler()
scaler.fit(df2)
train_scaled = scaler.transform(df2)

train_scaled

# Optimasi K-Means dengan metode elbow
wcss = []
for i in range(1, 7):
    kmeans = KMeans(n_clusters = i, init = 'k-means++', random_state = 42)
    kmeans.fit(df2)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 7), wcss)
plt.title('Elbow Method')
plt.xlabel('Cluster Number')
plt.ylabel('WCSS')
plt.show()

X = X.values

y = y.values

# Proses K-Means Clustering
kmeans = KMeans(n_clusters = 2, init = 'k-means++', random_state = 42)
y_kmeans = kmeans.fit_predict(df2)

# Visualisasi hasil clusters
plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s = 100, c = 'blue', label = 'Cluster 1')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s = 100, c = 'red', label = 'Cluster 2')
plt.title('Clustering Result')
plt.legend()

import joblib
joblib.dump(y_kmeans,"clustering.pkl")